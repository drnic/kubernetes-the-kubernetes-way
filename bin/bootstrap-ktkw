#!/bin/bash

# TODO
# - [x] setup nginx /healthz on each controller
# - [x] workers to use public-ip
# - [x] setup flannel networking
# - [x] networking working now?
# - [x] external kubeconfig -> public-ip + ca.crt
# - [x] GCE cloud-provider - LoadBalancer, PV/PVCs
# - [x] multiple controllers
# - [x] * sudo kubeadm init --control-plane-endpoint "LOAD_BALANCER_DNS:LOAD_BALANCER_PORT" --upload-certs
# - [x] * kubeadm join --control-plane

set -eu

MASTERS=${MASTERS:-1}
WORKERS=${WORKERS:-2}
REGION=$(gcloud config get-value compute/region)

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

[[ -z ${SKIP_GCLOUD:-} ]] && {
(
  set -x
  gcloud compute networks create kubernetes-the-kubernetes-way --subnet-mode custom || echo skipping...
  gcloud compute networks subnets create kubernetes \
    --network kubernetes-the-kubernetes-way \
    --range 10.240.0.0/24 || echo skipping...
  gcloud compute firewall-rules create kubernetes-the-kubernetes-way-allow-internal \
    --allow tcp,udp,icmp \
    --network kubernetes-the-kubernetes-way \
    --source-ranges 10.240.0.0/24 || echo skipping...
  gcloud compute firewall-rules create kubernetes-the-kubernetes-way-allow-external \
    --allow tcp:22,tcp:6443,icmp \
    --network kubernetes-the-kubernetes-way \
    --source-ranges 0.0.0.0/0 || echo skipping...
  gcloud compute addresses create kubernetes-the-kubernetes-way \
    --region "$REGION" || echo skipping...
)

i=0
while [ $i -lt $MASTERS ]; do
  (
  set -x
  gcloud compute instances create controller-${i} \
    --async \
    --boot-disk-size 200GB \
    --can-ip-forward \
    --image-family ubuntu-1804-lts \
    --image-project ubuntu-os-cloud \
    --machine-type n1-standard-1 \
    --private-network-ip 10.240.0.1${i} \
    --scopes compute-rw,storage-ro,service-management,service-control,logging-write,monitoring \
    --subnet kubernetes \
    --tags kubernetes-the-kubernetes-way,controller || echo skipping...
  )
  ((i++))
done

i=0
while [ $i -lt $WORKERS ]; do
  (
  set -x
  gcloud compute instances create worker-${i} \
    --async \
    --boot-disk-size 200GB \
    --can-ip-forward \
    --image-family ubuntu-1804-lts \
    --image-project ubuntu-os-cloud \
    --machine-type n1-standard-1 \
    --private-network-ip 10.240.0.2${i} \
    --scopes compute-rw,storage-ro,service-management,service-control,logging-write,monitoring \
    --subnet kubernetes \
    --tags kubernetes-the-kubernetes-way,worker || echo skipping...
  )
  ((i++))
done
}

KUBERNETES_PUBLIC_ADDRESS=$(gcloud compute addresses describe kubernetes-the-kubernetes-way \
  --region $(gcloud config get-value compute/region) \
  --format 'value(address)')

(
  set -x
  gcloud compute http-health-checks create kubernetes \
    --description "Kubernetes Health Check" \
    --host "kubernetes.default.svc.cluster.local" \
    --request-path "/healthz" || echo skipping...

  gcloud compute firewall-rules create kubernetes-the-kubernetes-way-allow-health-check \
    --network kubernetes-the-kubernetes-way \
    --source-ranges 209.85.152.0/22,209.85.204.0/22,35.191.0.0/16 \
    --allow tcp || echo skipping...

  gcloud compute target-pools create kubernetes-target-pool \
    --http-health-check kubernetes || echo skipping...

  gcloud compute target-pools add-instances kubernetes-target-pool \
    --instances controller-0 || echo skipping...
)

(
  set -x
  gcloud compute forwarding-rules create kubernetes-forwarding-rule \
    --address "${KUBERNETES_PUBLIC_ADDRESS}" \
    --ports 6443 \
    --region "${REGION}" \
    --target-pool kubernetes-target-pool || echo skipping...

  gcloud compute instances list
)

[[ -f pki/ca.crt ]] || {
(
  rm -rf pki
  mkdir -p pki
  cd pki
  cat > ca-config.json <<EOF
{
  "signing": {
    "default": {
      "expiry": "8760h"
    },
    "profiles": {
      "kubernetes": {
        "usages": ["signing", "key encipherment", "server auth", "client auth"],
        "expiry": "8760h"
      }
    }
  }
}
EOF

  cat > ca-csr.json <<EOF
{
  "CN": "Kubernetes",
  "key": {
    "algo": "rsa",
    "size": 2048
  },
  "names": [
    {
      "C": "AU",
      "L": "Brisbane",
      "O": "Kubernetes",
      "OU": "CA",
      "ST": "Queensland"
    }
  ]
}
EOF

  cfssl gencert -initca ca-csr.json | cfssljson -bare ca

  mkdir -p etcd
  mv ca.pem     ca.crt
  mv ca-key.pem ca.key
  cp ca.* etcd/
  cp ca.crt front-proxy-ca.crt
  cp ca.key front-proxy-ca.key

  openssl genrsa -out sa.key 2048
  openssl rsa -in sa.key -outform PEM -pubout -out sa.pub
  # pki
  # ├── ca.crt
  # ├── ca.key
  # ├── etcd
  # │   ├── ca.crt
  # │   └── ca.key
  # ├── front-proxy-ca.crt
  # ├── front-proxy-ca.key
  # ├── sa.key
  # └── sa.pub
)
}

gcloud compute addresses describe kubernetes-the-kubernetes-way \
  --region "$REGION" \
  --format 'value(address)' > kube-apiserver-public-ip

instance=controller-0
while [[ ! $(gcloud compute ssh ${instance} --command "hostname -s" 2>/dev/null) ]]; do
  echo "waiting for ssh access to ${instance}"
  sleep 5
done
(
  set -x

  gcloud compute scp --recurse \
    pki \
    kube-apiserver-public-ip \
    $DIR/setup-from-debian.sh \
    ${instance}:~/

  gcloud compute ssh ${instance} -- ./setup-from-debian.sh

  gcloud compute scp --recurse controller-0:{bootstrap-token-auth,discovery-token-ca-cert-hash} .
)

function join_node() {
  instance=$1
  [[ $instance =~ ^controller ]] && { export control_plane=1; }
  while [[ ! $(gcloud compute ssh ${instance} --command "hostname -s" 2>/dev/null) ]]; do
    echo "waiting for ssh access to ${instance}"
    sleep 5
  done
  set -x

  gcloud compute scp --recurse \
    kube-apiserver-public-ip \
    ${control_plane:+pki} \
    bootstrap-token-auth discovery-token-ca-cert-hash \
    $DIR/setup-from-debian.sh \
    ${instance}:~/

  gcloud compute ssh ${instance} -- ./setup-from-debian.sh
}

# Bootstrap + join additional master/controllers
i=1
while [ $i -lt $MASTERS ]; do
  instance=controller-$i
  join_node $instance
  ((i++))
done

i=1
while [ $i -lt $MASTERS ]; do
(
  set -x
  gcloud compute target-pools add-instances kubernetes-target-pool \
    --instances "controller-$i" || echo skipping...
)
  ((i++))
done

# Bootstrap + join workers
i=0
while [ $i -lt $WORKERS ]; do
  instance=worker-$i
  join_node $instance
  ((i++))
done

